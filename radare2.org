* radare2
  - CLI debugger; has web UIs but they are buggy, unmaintained, implement a small subset, require node, npm, yearn
  - easy to compile from source, "it just works" (https://github.com/radareorg/radare2https://github.com/radareorg/radare2)
  - clone repo, install dependencies (one command), and build - it will also be installed
  - to update after build/install, go to the repo and: ~./sys/install.sh~ (it will ~git pull~, build and install new version)
  - to start debugging: ~$ r2 -dQ loop.asm.exe~ (~d~ - debug, ~Q~ - quiet, no quote)
  - while debugging, ~:~ can be used to enter command mode
  - ~.~ takes you to ~rip~, ~jk~ moves down/up
  - ~v~ open panels view (debug mode); while in panels mode, press ~?~ to see help
  - use ~e~ to change what is displayed in a panel; for example, ~drc~ so it shows the flags
  - use ~w~ to enter "window" mode, and resize current panel with ~HJKL~
  - use ~X~ to close the current panel
  - use ~v= foo~ to save current panel layout as ~foo~; then ~v foo~ to load the layout
  - ~ds?~ - help on debug commands
  - ~F7~ or ~ds~ - step in
  - ~isq~ - view symbols
  - ~drc~ - flag registers
  - ~db~ - list breakpoints; ~db 0xff~ - set breakpoint; ~dc~ - continue; ~do~ - reopen
  - ~dsi <cond>~ - continue until condition (example ??)
  - ~dso <n>~ - step over ~n~ instructions (automatically puts breakpoint, hence a bp-related message)
  - Q: where can i find a reference of all debugging commands ? not the ~p*~ ones, but stuff like ~F7~
  - Q: what is the ~orax~ register ?
  - r2con: https://www.youtube.com/channel/UCZo6gyBPj6Vgg8u2dfIhY4Q
  - Pancake Nopcode: https://www.youtube.com/channel/UC3G6k7XfTgcWD2PJR8qJSkQ
  - can seek to symbols: ~s loc.foo~
  - can use tab completion - example, ~s loc.~ will auto-complete symbols
  - commands can be combined: ~s loc.a; px 1~
  - seek locations can be adjusted: ~s loc.a+1~
** Core
  - ~r2 core~ to open a core file in ~radare2~
  - ~dr~ to print registers at the time of the dump
  - ~pxr @ rsp~ to print the stack, with 16 bytes in a row
  - ~pxr8 @ rsp~ to print the stack, with 8 bytes in a row
  - https://reverseengineering.stackexchange.com/q/16844
  - https://reverseengineering.stackexchange.com/q/20434

#+BEGIN_SRC asm :tangle foo.asm
  global _start
  section .data
    foo: dq 0
    bar: dq 0
#+END_SRC

- to view symbol addresses:
#+BEGIN_SRC
:> is
[Symbols]

nth paddr      vaddr      bind   type   size lib name
―――――――――――――――――――――――――――――――――――――――――――――――――――――
1   0x00001000 0x00401000 LOCAL  SECT   0        .text
2   0x00002000 0x00402000 LOCAL  SECT   0        .data
3   ---------- 0x00000000 LOCAL  FILE   0        operand-size.asm
4   0x00002000 0x00402000 LOCAL  NOTYPE 0        foo
5   0x00002008 0x00402008 LOCAL  NOTYPE 0        bar
6   0x00001000 0x00401000 GLOBAL NOTYPE 0        _start
7   ---------- 0x00402010 GLOBAL NOTYPE 0        __bss_start
8   ---------- 0x00402010 GLOBAL NOTYPE 0        _edata
9   ---------- 0x00402010 GLOBAL NOTYPE 0        _end
#+END_SRC

- can't seem to be able to seek to address of foo:
#+BEGIN_SRC
:> s &foo
Cannot seek to unknown address '&foo'
:> s *foo
Cannot seek to unknown address '*foo'
:> s `foo`
Cannot seek to unknown address ' -- r2 is for the people'
:> s *foo
Cannot seek to unknown address '*foo'
:> s `*foo`
#+END_SRC
- the last one does not error out but goes to 0x00

- when seeking to (manually inputted) addr of foo:
#+BEGIN_SRC asm
│             ;-- section..data:                                                                                                                                                                          │ 0x7ffef0b75610  5664 b7f0 fe7f 0000 6864 b7f0 fe7f 0000  Vd......hd......    │
│             ;-- segment.LOAD2:                                                                                                                                                                          │ 0x7ffef0b75620  8864 b7f0 fe7f 0000 b164 b7f0 fe7f 0000  .d.......d......    │
│             ;-- .data:                                                                                                                                                                                  │ 0x7ffef0b75630  cd64 b7f0 fe7f 0000 e164 b7f0 fe7f 0000  .d.......d......    │
│             ;-- foo:                                                                                                                                                                                    │ 0x7ffef0b75640  f864 b7f0 fe7f 0000 0b65 b7f0 fe7f 0000  .d.......e......    │
│             ;-- map._media_mihai_4A985B16985B003D_Users_Mihai_code_low_level_programming_operand_size.asm.exe.rw_:                                                                                      │ 0x7ffef0b75650  1f65 b7f0 fe7f 0000 3b65 b7f0 fe7f 0000  .e......;e......    ││             0x00402000      0100           add dword [rax], eax        ; [02] -rw- section size 16 named .data                                                                                          │ 0x7ffef0b75660  8465 b7f0 fe7f 0000 9265 b7f0 fe7f 0000  .e.......e......    │
│             0x00402002      0000           add byte [rax], al                                                                                                                                           │ 0x7ffef0b75670  ad65 b7f0 fe7f 0000 c265 b7f0 fe7f 0000  .e.......e......    │
│             0x00402004      0000           add byte [rax], al                                                                                                                                           │ 0x7ffef0b75680  f665 b7f0 fe7f 0000 1f66 b7f0 fe7f 0000  .e.......f......    │
│             0x00402006      0000           add byte [rax], al                                                                                                                                           │ 0x7ffef0b75690  4066 b7f0 fe7f 0000 4d66 b7f0 fe7f 0000  @f......Mf......    │
│             ;-- bar:                                                                                                                                                                                    │ 0x7ffef0b756a0  5e66 b7f0 fe7f 0000 6d66 b7f0 fe7f 0000  ^f......mf......    │
│             0x00402008      0000           add byte [rax], al                                                                                                                                           │                                                                              │
│             0x0040200a      0000           add byte [rax], al                                                                                                                                           │                                                                              │
│             0x0040200c      0000           add byte [rax], al                                                                                                                                           │                                                                              │
│             0x0040200e      0000           add byte [rax], al                                                                                                                                           │                                                                              │
│             ;-- __bss_start:                                                                                                                                                                            │                                                                              │
│             ;-- _edata:                                                                                                                                                                                 │                                                                              │
│             ;-- _end:                                                                                                                                                                                   │                                                                              │
#+END_SRC
*** Mouse
   - even if r2 is a CLI app, mouse does work and can be useful
   - clicking on a register in the debug view will hilight it in regsiters view
     - only does full matches though - so click on ecx won't hilight rcx
   - clicking on [x] in top-left of panels will close them
*** Resources
- using ~radare2~ for debugging: https://www.youtube.com/watch?v=Yn1fGs8WwSM (channel: https://www.youtube.com/c/BinaryAdventure/videos)
- https://www.megabeets.net/a-journey-into-radare-2-part-1/

** cheatsheets
- https://gist.github.com/cronos2810/6a72f7b9563c96d7863eb87bea375554
- https://github.com/radareorg/radare2/blob/master/doc/intro.md

** ~rax2~
   - useful tool for conversions - installed as part of ~radare2~
   - NOTE: it omits leading 0s
#+BEGIN_SRC sh
$ rax2 Bx1122334455667788 # ⇒ 1000100100010001100110100010001010101011001100111011110001000b
$ rax2 0x40 # ⇒ 64
$ rax2 Bx40 # ⇒ 1000000b # (64 in binary)
$ rax2 60 # ⇒ 0x3c
$ rax2 Bx3c # ⇒ 111100b
$ rax2 0001000100100010b # ⇒ 0x1122
$ rax2 0x22 # ⇒ 34
#+END_SRC
